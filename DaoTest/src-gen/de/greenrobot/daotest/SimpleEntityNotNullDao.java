package de.greenrobot.daotest;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Connection;

import de.greenrobot.platform.java.util.JDBCUtils;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import de.greenrobot.daotest.SimpleEntityNotNull;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SIMPLE_ENTITY_NOT_NULL.
*/
public class SimpleEntityNotNullDao extends AbstractDao<SimpleEntityNotNull, Long> {

    public static final String TABLENAME = "SIMPLE_ENTITY_NOT_NULL";

    /**
     * Properties of entity SimpleEntityNotNull.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property SimpleBoolean = new Property(1, boolean.class, "simpleBoolean", false, "SIMPLE_BOOLEAN");
        public final static Property SimpleByte = new Property(2, byte.class, "simpleByte", false, "SIMPLE_BYTE");
        public final static Property SimpleShort = new Property(3, short.class, "simpleShort", false, "SIMPLE_SHORT");
        public final static Property SimpleInt = new Property(4, int.class, "simpleInt", false, "SIMPLE_INT");
        public final static Property SimpleLong = new Property(5, long.class, "simpleLong", false, "SIMPLE_LONG");
        public final static Property SimpleFloat = new Property(6, float.class, "simpleFloat", false, "SIMPLE_FLOAT");
        public final static Property SimpleDouble = new Property(7, double.class, "simpleDouble", false, "SIMPLE_DOUBLE");
        public final static Property SimpleString = new Property(8, String.class, "simpleString", false, "SIMPLE_STRING");
        public final static Property SimpleByteArray = new Property(9, byte[].class, "simpleByteArray", false, "SIMPLE_BYTE_ARRAY");
    };


    public SimpleEntityNotNullDao(DaoConfig config) {
        super(config);
    }
    
    public SimpleEntityNotNullDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Connection connection, boolean ifNotExists) throws SQLException {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        JDBCUtils.execute( connection, "CREATE TABLE " + constraint + "'SIMPLE_ENTITY_NOT_NULL' (" + //
                "'_id' INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "'SIMPLE_BOOLEAN' INTEGER NOT NULL ," + // 1: simpleBoolean
                "'SIMPLE_BYTE' INTEGER NOT NULL ," + // 2: simpleByte
                "'SIMPLE_SHORT' INTEGER NOT NULL ," + // 3: simpleShort
                "'SIMPLE_INT' INTEGER NOT NULL ," + // 4: simpleInt
                "'SIMPLE_LONG' INTEGER NOT NULL ," + // 5: simpleLong
                "'SIMPLE_FLOAT' REAL NOT NULL ," + // 6: simpleFloat
                "'SIMPLE_DOUBLE' REAL NOT NULL ," + // 7: simpleDouble
                "'SIMPLE_STRING' TEXT NOT NULL ," + // 8: simpleString
                "'SIMPLE_BYTE_ARRAY' BLOB NOT NULL );"); // 9: simpleByteArray
    }

    /** Drops the underlying database table. */
    public static void dropTable(Connection connection, boolean ifExists) throws SQLException {
        JDBCUtils.execute( connection, "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SIMPLE_ENTITY_NOT_NULL'");
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(PreparedStatement statement, SimpleEntityNotNull entity) throws SQLException {
        statement.setLong(1, entity.getId());
        statement.setLong(2, entity.getSimpleBoolean() ? 1l: 0l);
        statement.setLong(3, entity.getSimpleByte());
        statement.setLong(4, entity.getSimpleShort());
        statement.setLong(5, entity.getSimpleInt());
        statement.setLong(6, entity.getSimpleLong());
        statement.setDouble(7, entity.getSimpleFloat());
        statement.setDouble(8, entity.getSimpleDouble());
        statement.setString(9, entity.getSimpleString());
        statement.setBytes(10, entity.getSimpleByteArray());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(ResultSet resultSet, int offset) throws SQLException {
    	int index = 1;
        return resultSet.getLong(offset + index++);
    }    

    /** @inheritdoc */
    @Override
    public SimpleEntityNotNull readEntity(ResultSet resultSet, int offset) throws SQLException {
		int index = 1;
        SimpleEntityNotNull entity = new SimpleEntityNotNull(
            resultSet.getLong(offset + index++), // id
            resultSet.getShort(offset + index++) != 0, // simpleBoolean
            (byte) resultSet.getShort(offset + index++), // simpleByte
            resultSet.getShort(offset + index++), // simpleShort
            resultSet.getInt(offset + index++), // simpleInt
            resultSet.getLong(offset + index++), // simpleLong
            resultSet.getFloat(offset + index++), // simpleFloat
            resultSet.getDouble(offset + index++), // simpleDouble
            resultSet.getString(offset + index++), // simpleString
            resultSet.getBytes(offset + index++) // simpleByteArray
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(ResultSet resultSet, SimpleEntityNotNull entity, int offset) throws SQLException {
		int index = 1;
        entity.setId(resultSet.getLong(offset + index++));
        entity.setSimpleBoolean(resultSet.getShort(offset + index++) != 0);
        entity.setSimpleByte((byte) resultSet.getShort(offset + index++));
        entity.setSimpleShort(resultSet.getShort(offset + index++));
        entity.setSimpleInt(resultSet.getInt(offset + index++));
        entity.setSimpleLong(resultSet.getLong(offset + index++));
        entity.setSimpleFloat(resultSet.getFloat(offset + index++));
        entity.setSimpleDouble(resultSet.getDouble(offset + index++));
        entity.setSimpleString(resultSet.getString(offset + index++));
        entity.setSimpleByteArray(resultSet.getBytes(offset + index++));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SimpleEntityNotNull entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SimpleEntityNotNull entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
