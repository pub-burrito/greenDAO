package de.greenrobot.daotest;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import android.database.sqlite.SQLiteDatabase;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.JDBCUtils;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TEST_ENTITY.
*/
public class TestEntityDao extends AbstractDao<TestEntity, Long> {

    public static final String TABLENAME = "TEST_ENTITY";

    /**
     * Properties of entity TestEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SimpleInt = new Property(1, int.class, "simpleInt", false, "SIMPLE_INT");
        public final static Property SimpleInteger = new Property(2, Integer.class, "simpleInteger", false, "SIMPLE_INTEGER");
        public final static Property SimpleStringNotNull = new Property(3, String.class, "simpleStringNotNull", false, "SIMPLE_STRING_NOT_NULL");
        public final static Property SimpleString = new Property(4, String.class, "simpleString", false, "SIMPLE_STRING");
        public final static Property IndexedString = new Property(5, String.class, "indexedString", false, "INDEXED_STRING");
        public final static Property IndexedStringAscUnique = new Property(6, String.class, "indexedStringAscUnique", false, "INDEXED_STRING_ASC_UNIQUE");
        public final static Property SimpleDate = new Property(7, java.util.Date.class, "simpleDate", false, "SIMPLE_DATE");
        public final static Property SimpleBoolean = new Property(8, Boolean.class, "simpleBoolean", false, "SIMPLE_BOOLEAN");
    };


    public TestEntityDao(DaoConfig config) {
        super(config);
    }
    
    public TestEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. 
     * @throws SQLException */
    public static void createTable(Connection connection, boolean ifNotExists) throws SQLException {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        PreparedStatement statement = connection.prepareStatement(
    		"CREATE TABLE " + constraint + "'TEST_ENTITY' (" + //
            "'_id' INTEGER PRIMARY KEY ," + // 0: id
            "'SIMPLE_INT' INTEGER NOT NULL ," + // 1: simpleInt
            "'SIMPLE_INTEGER' INTEGER," + // 2: simpleInteger
            "'SIMPLE_STRING_NOT_NULL' TEXT NOT NULL ," + // 3: simpleStringNotNull
            "'SIMPLE_STRING' TEXT," + // 4: simpleString
            "'INDEXED_STRING' TEXT," + // 5: indexedString
            "'INDEXED_STRING_ASC_UNIQUE' TEXT," + // 6: indexedStringAscUnique
            "'SIMPLE_DATE' INTEGER," + // 7: simpleDate
            "'SIMPLE_BOOLEAN' INTEGER);" // 8: simpleBoolean
        ); 
        statement.execute();
        statement.close();
        // Add Indexes
        statement = connection.prepareStatement("CREATE INDEX " + constraint + "IDX_TEST_ENTITY_INDEXED_STRING ON TEST_ENTITY" +
                " (INDEXED_STRING);");
        statement.execute();
        statement.close();

        statement = connection.prepareStatement("CREATE UNIQUE INDEX " + constraint + "IDX_TEST_ENTITY_INDEXED_STRING_ASC_UNIQUE ON TEST_ENTITY" +
                " (INDEXED_STRING_ASC_UNIQUE);");
        statement.execute();
        statement.close();
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TEST_ENTITY'";
        db.execSQL(sql);
    }

    /** @throws SQLException 
     * @inheritdoc */
    @Override
    protected void bindValues(PreparedStatement stmt, TestEntity entity) throws SQLException {
//        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.setLong(1, id);
        }
        stmt.setLong(2, entity.getSimpleInt());
 
        Integer simpleInteger = entity.getSimpleInteger();
        if (simpleInteger != null) {
            stmt.setLong(3, simpleInteger);
        }
        stmt.setString(4, entity.getSimpleStringNotNull());
 
        String simpleString = entity.getSimpleString();
        if (simpleString != null) {
            stmt.setString(5, simpleString);
        }
 
        String indexedString = entity.getIndexedString();
        if (indexedString != null) {
            stmt.setString(6, indexedString);
        }
 
        String indexedStringAscUnique = entity.getIndexedStringAscUnique();
        if (indexedStringAscUnique != null) {
            stmt.setString(7, indexedStringAscUnique);
        }
 
        java.util.Date simpleDate = entity.getSimpleDate();
        if (simpleDate != null) {
            stmt.setLong(8, simpleDate.getTime());
        }
 
        Boolean simpleBoolean = entity.getSimpleBoolean();
        if (simpleBoolean != null) {
            stmt.setLong(9, simpleBoolean ? 1l: 0l);
        }
    }

    /** @throws SQLException 
     * @inheritdoc */
    @Override
    public Long readKey(ResultSet resultSet, int offset) throws SQLException {
        return JDBCUtils.isNull(resultSet, offset + 0) ? null : resultSet.getLong(offset + 0);
    }    

    /** @throws SQLException 
     * @inheritdoc */
    @Override
    public TestEntity readEntity(ResultSet resultSet, int offset) throws SQLException {
        TestEntity entity = new TestEntity( //
            JDBCUtils.isNull(resultSet, offset + 0) ? null : resultSet.getLong(offset + 0), // id
            resultSet.getInt(offset + 1), // simpleInt
            JDBCUtils.isNull(resultSet, offset + 2) ? null : resultSet.getInt(offset + 2), // simpleInteger
            resultSet.getString(offset + 3), // simpleStringNotNull
            JDBCUtils.isNull(resultSet, offset + 4) ? null : resultSet.getString(offset + 4), // simpleString
            JDBCUtils.isNull(resultSet, offset + 5) ? null : resultSet.getString(offset + 5), // indexedString
            JDBCUtils.isNull(resultSet, offset + 6) ? null : resultSet.getString(offset + 6), // indexedStringAscUnique
            JDBCUtils.isNull(resultSet, offset + 7) ? null : new java.util.Date(resultSet.getLong(offset + 7)), // simpleDate
            JDBCUtils.isNull(resultSet, offset + 8) ? null : resultSet.getShort(offset + 8) != 0 // simpleBoolean
        );
        return entity;
    }
     
    /** @throws SQLException 
     * @inheritdoc */
    @Override
    public void readEntity(ResultSet resultSet, TestEntity entity, int offset) throws SQLException {
        entity.setId(JDBCUtils.isNull(resultSet, offset + 0) ? null : resultSet.getLong(offset + 0));
        entity.setSimpleInt(resultSet.getInt(offset + 1));
        entity.setSimpleInteger(JDBCUtils.isNull(resultSet, offset + 2) ? null : resultSet.getInt(offset + 2));
        entity.setSimpleStringNotNull(resultSet.getString(offset + 3));
        entity.setSimpleString(JDBCUtils.isNull(resultSet, offset + 4) ? null : resultSet.getString(offset + 4));
        entity.setIndexedString(JDBCUtils.isNull(resultSet, offset + 5) ? null : resultSet.getString(offset + 5));
        entity.setIndexedStringAscUnique(JDBCUtils.isNull(resultSet, offset + 6) ? null : resultSet.getString(offset + 6));
        entity.setSimpleDate(JDBCUtils.isNull(resultSet, offset + 7) ? null : new java.util.Date(resultSet.getLong(offset + 7)));
        entity.setSimpleBoolean(JDBCUtils.isNull(resultSet, offset + 8) ? null : resultSet.getShort(offset + 8) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TestEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TestEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
