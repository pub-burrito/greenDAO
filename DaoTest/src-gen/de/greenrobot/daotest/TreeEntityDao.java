package de.greenrobot.daotest;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import android.database.sqlite.SQLiteDatabase;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;
import de.greenrobot.platform.java.util.JDBCUtils;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TREE_ENTITY.
*/
public class TreeEntityDao extends AbstractDao<TreeEntity, Long> {

    public static final String TABLENAME = "TREE_ENTITY";

    /**
     * Properties of entity TreeEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ParentId = new Property(1, Long.class, "parentId", false, "PARENT_ID");
    };

    private DaoSession daoSession;

    private Query<TreeEntity> treeEntity_ChildrenQuery;

    public TreeEntityDao(DaoConfig config) {
        super(config);
    }
    
    public TreeEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. 
     * @throws SQLException */
    public static void createTable(Connection connection, boolean ifNotExists) throws SQLException {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        JDBCUtils.execute( connection, "CREATE TABLE " + constraint + "'TREE_ENTITY' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'PARENT_ID' INTEGER);"); // 1: parentId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TREE_ENTITY'";
        db.execSQL(sql);
    }

    /** @throws SQLException 
     * @inheritdoc */
    @Override
    protected void bindValues(PreparedStatement stmt, TreeEntity entity) throws SQLException {
//        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.setLong(1, id);
        }
 
        Long parentId = entity.getParentId();
        if (parentId != null) {
            stmt.setLong(2, parentId);
        }
    }

    @Override
    protected void attachEntity(TreeEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @throws SQLException 
     * @inheritdoc */
    @Override
    public Long readKey(ResultSet resultSet, int offset) throws SQLException {
        return JDBCUtils.isNull( resultSet, offset + 0) ? null : resultSet.getLong(offset + 0);
    }    

    /** @throws SQLException 
     * @inheritdoc */
    @Override
    public TreeEntity readEntity(ResultSet resultSet, int offset) throws SQLException {
        TreeEntity entity = new TreeEntity( //
            JDBCUtils.isNull( resultSet, offset + 0) ? null : resultSet.getLong(offset + 0), // id
            JDBCUtils.isNull( resultSet, offset + 1) ? null : resultSet.getLong(offset + 1) // parentId
        );
        return entity;
    }
     
    /** @throws SQLException 
     * @inheritdoc */
    @Override
    public void readEntity(ResultSet resultSet, TreeEntity entity, int offset) throws SQLException {
        entity.setId(JDBCUtils.isNull( resultSet, offset + 0) ? null : resultSet.getLong(offset + 0));
        entity.setParentId(JDBCUtils.isNull( resultSet, offset + 1) ? null : resultSet.getLong(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TreeEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TreeEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "children" to-many relationship of TreeEntity. 
     * @throws SQLException */
    public List<TreeEntity> _queryTreeEntity_Children(Long parentId) throws SQLException {
        synchronized (this) {
            if (treeEntity_ChildrenQuery == null) {
                QueryBuilder<TreeEntity> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ParentId.eq(null));
                treeEntity_ChildrenQuery = queryBuilder.build();
            }
        }
        Query<TreeEntity> query = treeEntity_ChildrenQuery.forCurrentThread();
        query.setParameter(0, parentId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getTreeEntityDao().getAllColumns());
            builder.append(" FROM TREE_ENTITY T");
            builder.append(" LEFT JOIN TREE_ENTITY T0 ON T.'PARENT_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected TreeEntity loadCurrentDeep(ResultSet resultSet, boolean lock) throws SQLException {
        TreeEntity entity = loadCurrent(resultSet, 0, lock);
        int offset = getAllColumns().length;

        TreeEntity parent = loadCurrentOther(daoSession.getTreeEntityDao(), resultSet, offset);
        entity.setParent(parent);

        return entity;    
    }

    public TreeEntity loadDeep(Long key) throws SQLException {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        Object[] keyArray = new Object[] { key.toString() };
        ResultSet resultSet = JDBCUtils.query( connection, sql, keyArray );
        
        try {
            boolean available = resultSet.next();
            if (!available) {
                return null;
            } else if (!resultSet.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + resultSet.getFetchSize());
            }
            return loadCurrentDeep(resultSet, true);
        } finally {
            resultSet.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. 
     * @throws SQLException */
    public List<TreeEntity> loadAllDeepFromCursor(ResultSet resultSet) throws SQLException {
        int count = resultSet.getFetchSize();
        List<TreeEntity> list = new ArrayList<TreeEntity>(count);
        
        if (resultSet.first()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(resultSet, false));
                } while (resultSet.next());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<TreeEntity> loadDeepAllAndCloseCursor(ResultSet resultSet) throws SQLException {
        try {
            return loadAllDeepFromCursor(resultSet);
        } finally {
            resultSet.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. 
     * @throws SQLException */
    public List<TreeEntity> queryDeep(String where, String... selectionArg) throws SQLException {
        ResultSet resultset = JDBCUtils.query(connection, ( getSelectDeep() + where ), (Object[]) selectionArg);
        return loadDeepAllAndCloseCursor(resultset);
    }
 
}
