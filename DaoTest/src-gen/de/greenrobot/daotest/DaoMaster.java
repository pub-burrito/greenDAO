package de.greenrobot.daotest;

import java.sql.Connection;
import java.sql.SQLException;

import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

import de.greenrobot.daotest.SimpleEntityDao;
import de.greenrobot.daotest.SimpleEntityNotNullDao;
import de.greenrobot.daotest.TestEntityDao;
import de.greenrobot.daotest.RelationEntityDao;
import de.greenrobot.daotest.DateEntityDao;
import de.greenrobot.daotest.SpecialNamesEntityDao;
import de.greenrobot.daotest.AbcdefEntityDao;
import de.greenrobot.daotest.ToManyTargetEntityDao;
import de.greenrobot.daotest.ToManyEntityDao;
import de.greenrobot.daotest.TreeEntityDao;
import de.greenrobot.daotest.AnActiveEntityDao;
import de.greenrobot.daotest.ExtendsImplementsEntityDao;
import de.greenrobot.daotest.StringKeyValueEntityDao;
import de.greenrobot.daotest.AutoincrementEntityDao;
import de.greenrobot.daotest.SqliteMasterDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 1): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 1;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(Connection connection, boolean ifNotExists) throws SQLException {
        SimpleEntityDao.createTable(connection, ifNotExists);
        SimpleEntityNotNullDao.createTable(connection, ifNotExists);
        TestEntityDao.createTable(connection, ifNotExists);
        RelationEntityDao.createTable(connection, ifNotExists);
        DateEntityDao.createTable(connection, ifNotExists);
        SpecialNamesEntityDao.createTable(connection, ifNotExists);
        AbcdefEntityDao.createTable(connection, ifNotExists);
        ToManyTargetEntityDao.createTable(connection, ifNotExists);
        ToManyEntityDao.createTable(connection, ifNotExists);
        TreeEntityDao.createTable(connection, ifNotExists);
        AnActiveEntityDao.createTable(connection, ifNotExists);
        ExtendsImplementsEntityDao.createTable(connection, ifNotExists);
        StringKeyValueEntityDao.createTable(connection, ifNotExists);
        AutoincrementEntityDao.createTable(connection, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(Connection connection, boolean ifExists) throws SQLException {
        SimpleEntityDao.dropTable(connection, ifExists);
        SimpleEntityNotNullDao.dropTable(connection, ifExists);
        TestEntityDao.dropTable(connection, ifExists);
        RelationEntityDao.dropTable(connection, ifExists);
        DateEntityDao.dropTable(connection, ifExists);
        SpecialNamesEntityDao.dropTable(connection, ifExists);
        AbcdefEntityDao.dropTable(connection, ifExists);
        ToManyTargetEntityDao.dropTable(connection, ifExists);
        ToManyEntityDao.dropTable(connection, ifExists);
        TreeEntityDao.dropTable(connection, ifExists);
        AnActiveEntityDao.dropTable(connection, ifExists);
        ExtendsImplementsEntityDao.dropTable(connection, ifExists);
        StringKeyValueEntityDao.dropTable(connection, ifExists);
        AutoincrementEntityDao.dropTable(connection, ifExists);
    }
    
    public DaoMaster(Connection connection) {
        super(connection, SCHEMA_VERSION);
        registerDaoClass(SimpleEntityDao.class);
        registerDaoClass(SimpleEntityNotNullDao.class);
        registerDaoClass(TestEntityDao.class);
        registerDaoClass(RelationEntityDao.class);
        registerDaoClass(DateEntityDao.class);
        registerDaoClass(SpecialNamesEntityDao.class);
        registerDaoClass(AbcdefEntityDao.class);
        registerDaoClass(ToManyTargetEntityDao.class);
        registerDaoClass(ToManyEntityDao.class);
        registerDaoClass(TreeEntityDao.class);
        registerDaoClass(AnActiveEntityDao.class);
        registerDaoClass(ExtendsImplementsEntityDao.class);
        registerDaoClass(StringKeyValueEntityDao.class);
        registerDaoClass(AutoincrementEntityDao.class);
        registerDaoClass(SqliteMasterDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(connection, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(connection, type, daoConfigMap);
    }
    
}
