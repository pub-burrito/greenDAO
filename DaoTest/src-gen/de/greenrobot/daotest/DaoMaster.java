package de.greenrobot.daotest;

import java.sql.Connection;
import java.sql.SQLException;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;
import de.greenrobot.platform.java.util.JDBCUtils;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 1): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 1;

    /** Creates underlying database table using DAOs. 
     * @throws SQLException */
    public static void createAllTables(Connection connection, boolean ifNotExists) throws SQLException {
        SimpleEntityDao.createTable(connection, ifNotExists);
        SimpleEntityNotNullDao.createTable(connection, ifNotExists);
        TestEntityDao.createTable(connection, ifNotExists);
        RelationEntityDao.createTable(connection, ifNotExists);
        DateEntityDao.createTable(connection, ifNotExists);
        SpecialNamesEntityDao.createTable(connection, ifNotExists);
        AbcdefEntityDao.createTable(connection, ifNotExists);
        ToManyTargetEntityDao.createTable(connection, ifNotExists);
        ToManyEntityDao.createTable(connection, ifNotExists);
        TreeEntityDao.createTable(connection, ifNotExists);
        AnActiveEntityDao.createTable(connection, ifNotExists);
        ExtendsImplementsEntityDao.createTable(connection, ifNotExists);
        StringKeyValueEntityDao.createTable(connection, ifNotExists);
        AutoincrementEntityDao.createTable(connection, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        SimpleEntityDao.dropTable(db, ifExists);
        SimpleEntityNotNullDao.dropTable(db, ifExists);
        TestEntityDao.dropTable(db, ifExists);
        RelationEntityDao.dropTable(db, ifExists);
        DateEntityDao.dropTable(db, ifExists);
        SpecialNamesEntityDao.dropTable(db, ifExists);
        AbcdefEntityDao.dropTable(db, ifExists);
        ToManyTargetEntityDao.dropTable(db, ifExists);
        ToManyEntityDao.dropTable(db, ifExists);
        TreeEntityDao.dropTable(db, ifExists);
        AnActiveEntityDao.dropTable(db, ifExists);
        ExtendsImplementsEntityDao.dropTable(db, ifExists);
        StringKeyValueEntityDao.dropTable(db, ifExists);
        AutoincrementEntityDao.dropTable(db, ifExists);
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
			try
			{
				String dbPath = db.getPath();
				Connection connection = JDBCUtils.connect( dbPath );
				createAllTables(connection, false);
			}
			catch ( SQLException e )
			{
				e.printStackTrace();
			}
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

    public DaoMaster(Connection connection) {
        super(connection, SCHEMA_VERSION);
        registerDaoClass(SimpleEntityDao.class);
        registerDaoClass(SimpleEntityNotNullDao.class);
        registerDaoClass(TestEntityDao.class);
        registerDaoClass(RelationEntityDao.class);
        registerDaoClass(DateEntityDao.class);
        registerDaoClass(SpecialNamesEntityDao.class);
        registerDaoClass(AbcdefEntityDao.class);
        registerDaoClass(ToManyTargetEntityDao.class);
        registerDaoClass(ToManyEntityDao.class);
        registerDaoClass(TreeEntityDao.class);
        registerDaoClass(AnActiveEntityDao.class);
        registerDaoClass(ExtendsImplementsEntityDao.class);
        registerDaoClass(StringKeyValueEntityDao.class);
        registerDaoClass(AutoincrementEntityDao.class);
        registerDaoClass(SqliteMasterDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(connection, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(connection, type, daoConfigMap);
    }
    
}
