package de.greenrobot.daotest;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;

import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.DaoException;
import de.greenrobot.dao.identityscope.IdentityScopeType;
import de.greenrobot.dao.internal.JDBCUtils;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 1): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 1;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(Connection connection, boolean ifNotExists) throws SQLException {
        SimpleEntityDao.createTable(connection, ifNotExists);
        SimpleEntityNotNullDao.createTable(connection, ifNotExists);
        TestEntityDao.createTable(connection, ifNotExists);
        RelationEntityDao.createTable(connection, ifNotExists);
        DateEntityDao.createTable(connection, ifNotExists);
        SpecialNamesEntityDao.createTable(connection, ifNotExists);
        AbcdefEntityDao.createTable(connection, ifNotExists);
        ToManyTargetEntityDao.createTable(connection, ifNotExists);
        ToManyEntityDao.createTable(connection, ifNotExists);
        TreeEntityDao.createTable(connection, ifNotExists);
        AnActiveEntityDao.createTable(connection, ifNotExists);
        ExtendsImplementsEntityDao.createTable(connection, ifNotExists);
        StringKeyValueEntityDao.createTable(connection, ifNotExists);
        AutoincrementEntityDao.createTable(connection, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(Connection connection, boolean ifExists) throws SQLException {
        SimpleEntityDao.dropTable(connection, ifExists);
        SimpleEntityNotNullDao.dropTable(connection, ifExists);
        TestEntityDao.dropTable(connection, ifExists);
        RelationEntityDao.dropTable(connection, ifExists);
        DateEntityDao.dropTable(connection, ifExists);
        SpecialNamesEntityDao.dropTable(connection, ifExists);
        AbcdefEntityDao.dropTable(connection, ifExists);
        ToManyTargetEntityDao.dropTable(connection, ifExists);
        ToManyEntityDao.dropTable(connection, ifExists);
        TreeEntityDao.dropTable(connection, ifExists);
        AnActiveEntityDao.dropTable(connection, ifExists);
        ExtendsImplementsEntityDao.dropTable(connection, ifExists);
        StringKeyValueEntityDao.dropTable(connection, ifExists);
        AutoincrementEntityDao.dropTable(connection, ifExists);
    }
    
    public static abstract class AbstractConnectionManager {
    
    	private String driverName;
    	private String connectionString;
    	private Connection connection;
    	
    	public AbstractConnectionManager(String driverName, String connectionString) {
    		this.driverName = driverName;
    		this.connectionString = connectionString;
    		try {
	    		onCreate();
	    	} catch (SQLException e) {
	    		throw new RuntimeException("Unable to manage this connection", e);
	    	}
    	}
    	
    	// TODO connection pooling
    	public Connection getConnection() throws SQLException {
    		if (this.connection == null) {
		    	this.connection = JDBCUtils.connect(driverName, connectionString);
			}
			return this.connection;    	
    	}
    	
		public void onOpen( Connection connection ) throws SQLException {} // not mandatory

    	public abstract void onCreate(Connection connection) throws SQLException;

    	public void onUpgrade(Connection connection, int oldVersion, int newVersion) throws SQLException {} // not mandatory
    	
    	private void onCreate() throws SQLException {
    		Connection connection = getConnection();
    		if (isBigBang(connection)) {
    			onCreate(connection);
    		}
    	}
    	
    	private boolean isBigBang(Connection connection) throws SQLException {
    		ResultSet resultSet = connection.getMetaData().getCatalogs();
    		boolean result = !resultSet.next();
    		resultSet.close();
    		return result;
    	}
    }
    
    public static abstract class ConnectionManager extends AbstractConnectionManager {

        public ConnectionManager(String driverName, String connectionString) {
            super(driverName, connectionString);
        }

        @Override
        public void onCreate(Connection connection) throws SQLException {
            //Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(connection, false);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevConnectionManager extends ConnectionManager {
        public DevConnectionManager(String driverName, String connectionString) {
            super(driverName, connectionString);
        }

        @Override
        public void onUpgrade(Connection connection, int oldVersion, int newVersion) throws SQLException {
            //Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(connection, true);
            onCreate(connection);
        }
    }
    
    public DaoMaster(Connection connection) throws DaoException {
        super(connection, SCHEMA_VERSION);
        registerDaoClass(SimpleEntityDao.class);
        registerDaoClass(SimpleEntityNotNullDao.class);
        registerDaoClass(TestEntityDao.class);
        registerDaoClass(RelationEntityDao.class);
        registerDaoClass(DateEntityDao.class);
        registerDaoClass(SpecialNamesEntityDao.class);
        registerDaoClass(AbcdefEntityDao.class);
        registerDaoClass(ToManyTargetEntityDao.class);
        registerDaoClass(ToManyEntityDao.class);
        registerDaoClass(TreeEntityDao.class);
        registerDaoClass(AnActiveEntityDao.class);
        registerDaoClass(ExtendsImplementsEntityDao.class);
        registerDaoClass(StringKeyValueEntityDao.class);
        registerDaoClass(AutoincrementEntityDao.class);
        registerDaoClass(SqliteMasterDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(connection, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(connection, type, daoConfigMap);
    }
    
}
