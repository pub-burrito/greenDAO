package de.greenrobot.daotest;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.JDBCUtils;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ABCDEF_ENTITY.
*/
public class AbcdefEntityDao extends AbstractDao<AbcdefEntity, Long> {

    public static final String TABLENAME = "ABCDEF_ENTITY";

    /**
     * Properties of entity AbcdefEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property A = new Property(1, Integer.class, "a", false, "A");
        public final static Property B = new Property(2, Integer.class, "b", false, "B");
        public final static Property C = new Property(3, Integer.class, "c", false, "C");
        public final static Property D = new Property(4, Integer.class, "d", false, "D");
        public final static Property E = new Property(5, Integer.class, "e", false, "E");
        public final static Property F = new Property(6, Integer.class, "f", false, "F");
        public final static Property G = new Property(7, Integer.class, "g", false, "G");
        public final static Property H = new Property(8, Integer.class, "h", false, "H");
        public final static Property J = new Property(9, Integer.class, "j", false, "J");
        public final static Property I = new Property(10, Integer.class, "i", false, "I");
        public final static Property K = new Property(11, Integer.class, "k", false, "K");
    };


    public AbcdefEntityDao(DaoConfig config) {
        super(config);
    }
    
    public AbcdefEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Connection connection, boolean ifNotExists) throws SQLException {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        JDBCUtils.execute( connection, "CREATE TABLE " + constraint + "'ABCDEF_ENTITY' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'A' INTEGER," + // 1: a
                "'B' INTEGER," + // 2: b
                "'C' INTEGER," + // 3: c
                "'D' INTEGER," + // 4: d
                "'E' INTEGER," + // 5: e
                "'F' INTEGER," + // 6: f
                "'G' INTEGER," + // 7: g
                "'H' INTEGER," + // 8: h
                "'J' INTEGER," + // 9: j
                "'I' INTEGER," + // 10: i
                "'K' INTEGER);"); // 11: k
    }

    /** Drops the underlying database table. */
    public static void dropTable(Connection connection, boolean ifExists) throws SQLException {
        JDBCUtils.execute( connection, "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ABCDEF_ENTITY'");
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(PreparedStatement statement, AbcdefEntity entity) throws SQLException {
 
        Long id = entity.getId();
        if (id != null) {
            statement.setLong(1, id);
        }
 
        Integer a = entity.getA();
        if (a != null) {
            statement.setLong(2, a);
        }
 
        Integer b = entity.getB();
        if (b != null) {
            statement.setLong(3, b);
        }
 
        Integer c = entity.getC();
        if (c != null) {
            statement.setLong(4, c);
        }
 
        Integer d = entity.getD();
        if (d != null) {
            statement.setLong(5, d);
        }
 
        Integer e = entity.getE();
        if (e != null) {
            statement.setLong(6, e);
        }
 
        Integer f = entity.getF();
        if (f != null) {
            statement.setLong(7, f);
        }
 
        Integer g = entity.getG();
        if (g != null) {
            statement.setLong(8, g);
        }
 
        Integer h = entity.getH();
        if (h != null) {
            statement.setLong(9, h);
        }
 
        Integer j = entity.getJ();
        if (j != null) {
            statement.setLong(10, j);
        }
 
        Integer i = entity.getI();
        if (i != null) {
            statement.setLong(11, i);
        }
 
        Integer k = entity.getK();
        if (k != null) {
            statement.setLong(12, k);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(ResultSet resultSet, int offset) throws SQLException {
        return JDBCUtils.isNull(resultSet, offset + 1) ? null : resultSet.getLong(offset + 1);
    }    

    /** @inheritdoc */
    @Override
    public AbcdefEntity readEntity(ResultSet resultSet, int offset) throws SQLException {
		int index = 1;
        AbcdefEntity entity = new AbcdefEntity(
            JDBCUtils.isNull(resultSet, offset + index) ? null : resultSet.getLong(offset + index++), // id
            JDBCUtils.isNull(resultSet, offset + index) ? null : resultSet.getInt(offset + index++), // a
            JDBCUtils.isNull(resultSet, offset + index) ? null : resultSet.getInt(offset + index++), // b
            JDBCUtils.isNull(resultSet, offset + index) ? null : resultSet.getInt(offset + index++), // c
            JDBCUtils.isNull(resultSet, offset + index) ? null : resultSet.getInt(offset + index++), // d
            JDBCUtils.isNull(resultSet, offset + index) ? null : resultSet.getInt(offset + index++), // e
            JDBCUtils.isNull(resultSet, offset + index) ? null : resultSet.getInt(offset + index++), // f
            JDBCUtils.isNull(resultSet, offset + index) ? null : resultSet.getInt(offset + index++), // g
            JDBCUtils.isNull(resultSet, offset + index) ? null : resultSet.getInt(offset + index++), // h
            JDBCUtils.isNull(resultSet, offset + index) ? null : resultSet.getInt(offset + index++), // j
            JDBCUtils.isNull(resultSet, offset + index) ? null : resultSet.getInt(offset + index++), // i
            JDBCUtils.isNull(resultSet, offset + index) ? null : resultSet.getInt(offset + index++) // k
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(ResultSet resultSet, AbcdefEntity entity, int offset) throws SQLException {
		int index = 1;
        entity.setId(JDBCUtils.isNull(resultSet, offset + index) ? null : resultSet.getLong(offset + index++));
        entity.setA(JDBCUtils.isNull(resultSet, offset + index) ? null : resultSet.getInt(offset + index++));
        entity.setB(JDBCUtils.isNull(resultSet, offset + index) ? null : resultSet.getInt(offset + index++));
        entity.setC(JDBCUtils.isNull(resultSet, offset + index) ? null : resultSet.getInt(offset + index++));
        entity.setD(JDBCUtils.isNull(resultSet, offset + index) ? null : resultSet.getInt(offset + index++));
        entity.setE(JDBCUtils.isNull(resultSet, offset + index) ? null : resultSet.getInt(offset + index++));
        entity.setF(JDBCUtils.isNull(resultSet, offset + index) ? null : resultSet.getInt(offset + index++));
        entity.setG(JDBCUtils.isNull(resultSet, offset + index) ? null : resultSet.getInt(offset + index++));
        entity.setH(JDBCUtils.isNull(resultSet, offset + index) ? null : resultSet.getInt(offset + index++));
        entity.setJ(JDBCUtils.isNull(resultSet, offset + index) ? null : resultSet.getInt(offset + index++));
        entity.setI(JDBCUtils.isNull(resultSet, offset + index) ? null : resultSet.getInt(offset + index++));
        entity.setK(JDBCUtils.isNull(resultSet, offset + index) ? null : resultSet.getInt(offset + index++));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AbcdefEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AbcdefEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
