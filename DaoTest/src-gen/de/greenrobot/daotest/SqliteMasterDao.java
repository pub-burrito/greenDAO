package de.greenrobot.daotest;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.platform.java.util.JDBCUtils;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SQLITE_MASTER.
*/
public class SqliteMasterDao extends AbstractDao<SqliteMaster, Void> {

    public static final String TABLENAME = "SQLITE_MASTER";

    /**
     * Properties of entity SqliteMaster.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Type = new Property(0, String.class, "type", false, "TYPE");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property TableName = new Property(2, String.class, "tableName", false, "tbl_name");
        public final static Property Rootpage = new Property(3, Long.class, "rootpage", false, "ROOTPAGE");
        public final static Property Sql = new Property(4, String.class, "sql", false, "SQL");
    };


    public SqliteMasterDao(DaoConfig config) {
        super(config);
    }
    
    public SqliteMasterDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** @throws SQLException 
     * @inheritdoc */
    @Override
    protected void bindValues(PreparedStatement stmt, SqliteMaster entity) throws SQLException {
//        stmt.clearBindings();
 
        String type = entity.getType();
        if (type != null) {
            stmt.setString(1, type);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.setString(2, name);
        }
 
        String tableName = entity.getTableName();
        if (tableName != null) {
            stmt.setString(3, tableName);
        }
 
        Long rootpage = entity.getRootpage();
        if (rootpage != null) {
            stmt.setLong(4, rootpage);
        }
 
        String sql = entity.getSql();
        if (sql != null) {
            stmt.setString(5, sql);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(ResultSet resultSet, int offset) {
        return null;
    }    

    /** @throws SQLException 
     * @inheritdoc */
    @Override
    public SqliteMaster readEntity(ResultSet resultSet, int offset) throws SQLException {
        SqliteMaster entity = new SqliteMaster( //
            JDBCUtils.isNull(resultSet, offset + 0) ? null : resultSet.getString(offset + 0), // type
            JDBCUtils.isNull(resultSet, offset + 1) ? null : resultSet.getString(offset + 1), // name
            JDBCUtils.isNull(resultSet, offset + 2) ? null : resultSet.getString(offset + 2), // tableName
            JDBCUtils.isNull(resultSet, offset + 3) ? null : resultSet.getLong(offset + 3), // rootpage
            JDBCUtils.isNull(resultSet, offset + 4) ? null : resultSet.getString(offset + 4) // sql
        );
        return entity;
    }
     
    /** @throws SQLException 
     * @inheritdoc */
    @Override
    public void readEntity(ResultSet resultSet, SqliteMaster entity, int offset) throws SQLException {
        entity.setType(JDBCUtils.isNull(resultSet, offset + 0) ? null : resultSet.getString(offset + 0));
        entity.setName(JDBCUtils.isNull(resultSet, offset + 1) ? null : resultSet.getString(offset + 1));
        entity.setTableName(JDBCUtils.isNull(resultSet, offset + 2) ? null : resultSet.getString(offset + 2));
        entity.setRootpage(JDBCUtils.isNull(resultSet, offset + 3) ? null : resultSet.getLong(offset + 3));
        entity.setSql(JDBCUtils.isNull(resultSet, offset + 4) ? null : resultSet.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(SqliteMaster entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(SqliteMaster entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
