package de.greenrobot.daotest2.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.JDBCUtils;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;
import de.greenrobot.daotest2.ToManyTarget2;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TO_MANY_TARGET2.
*/
public class ToManyTarget2Dao extends AbstractDao<ToManyTarget2, Long> {

    public static final String TABLENAME = "TO_MANY_TARGET2";

    /**
     * Properties of entity ToManyTarget2.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FkId = new Property(1, Long.class, "fkId", false, "FK_ID");
    };

    private Query<ToManyTarget2> relationSource2_ToManyTarget2ListQuery;

    public ToManyTarget2Dao(DaoConfig config) {
        super(config);
    }
    
    public ToManyTarget2Dao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Connection connection, boolean ifNotExists) throws SQLException {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        JDBCUtils.execute( connection, "CREATE TABLE " + constraint + "'TO_MANY_TARGET2' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'FK_ID' INTEGER);"); // 1: fkId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Connection connection, boolean ifExists) throws SQLException {
        JDBCUtils.execute( connection, "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TO_MANY_TARGET2'");
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(PreparedStatement statement, ToManyTarget2 entity) throws SQLException {
 
        Long id = entity.getId();
        if (id != null) {
            statement.setLong(1, id);
        }
 
        Long fkId = entity.getFkId();
        if (fkId != null) {
            statement.setLong(2, fkId);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(ResultSet resultSet, int offset) throws SQLException {
        return JDBCUtils.isNull(resultSet, offset + 1) ? null : resultSet.getLong(offset + 1);
    }    

    /** @inheritdoc */
    @Override
    public ToManyTarget2 readEntity(ResultSet resultSet, int offset) throws SQLException {
		int index = 1;
        ToManyTarget2 entity = new ToManyTarget2(
            JDBCUtils.isNull(resultSet, offset + index) ? null : resultSet.getLong(offset + index++), // id
            JDBCUtils.isNull(resultSet, offset + index) ? null : resultSet.getLong(offset + index++) // fkId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(ResultSet resultSet, ToManyTarget2 entity, int offset) throws SQLException {
		int index = 1;
        entity.setId(JDBCUtils.isNull(resultSet, offset + index) ? null : resultSet.getLong(offset + index++));
        entity.setFkId(JDBCUtils.isNull(resultSet, offset + index) ? null : resultSet.getLong(offset + index++));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ToManyTarget2 entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ToManyTarget2 entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "toManyTarget2List" to-many relationship of RelationSource2. */
    public List<ToManyTarget2> _queryRelationSource2_ToManyTarget2List(Long fkId) throws SQLException {
        synchronized (this) {
            if (relationSource2_ToManyTarget2ListQuery == null) {
                QueryBuilder<ToManyTarget2> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.FkId.eq(null));
                relationSource2_ToManyTarget2ListQuery = queryBuilder.build();
            }
        }
        Query<ToManyTarget2> query = relationSource2_ToManyTarget2ListQuery.forCurrentThread();
        query.setParameter(0, fkId);
        return query.list();
    }

}
